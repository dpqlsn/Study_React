### 01. Components
1. 작은 컴포넌트들이 모여 하나의 컴포넌트를 구성하고 이러한 컴포넌트들이 모여 전체 페이지를 구상

2. 하나의 컴포넌트를 반복적으로 사용함으로써 전체 코드의 양을 줄일 수 있어서 개발 시간과 보수 비용도 줄일 수 있음

3. 리액트 컴포넌트에서의 입력은 props이고 출력은 React Component 의 역할은 어떠한 속성들을 입력으로 받아서 그에 맞게 리액트 엘리먼트를 생성해서 리턴해주는 것

### 02. Props
1. Property를 줄여서 사용하고 속성이라는 뜻 즉, 컴포넌트에 전달할 다양한 정보를 담고 있는 자바스크립트 객체

2. 눈에 보이는 글자나 속성을 바꾸고 싶을 떄 사용

3. 읽기 전용으로 값을 변경할 수 없음

4. 모든 리액트 컴포넌트는 Props를 직접 바꿀 수 없고, 같은 Props에 대해서는 항상 같은 결과를 보여줌

### 03. Props 사용법

function App(props){
    return (
        <profile
            name="에빈"
            introduction="안녕하세요, 에빈입니다"
            viewCount={1500}
        />
    )
}

### 04. component 만들기 및 렌더링
1. Function Component (함수 컴포넌트)
React Component는 pure 함수와 같은 역할을 해야 하므로 컴포넌트를 함수라고 함

3. Class Component
클래스 컴포넌트는 Javascript ES6의 Class라는 것을 사용해서 만들어진 형태의 컴포넌트

4. 컴포넌트의 이름은 항상 대문자로 사옹해야함 소문자로 시작하면 리액트는 DOM 태그로 인식을 하기 때문

### 05. 장점
1. 간단한 코드

### 06. Component 합성과 추출
1. Components 합성
컴포넌트 합성은 여러 개의 컴포넌트를 함쳐서 하나의 컴포넌트를 만드는 것을 의미

컴포넌트는 {} 안에도 다른 컴포넌트를 사용할 수 있기 때문에 복잡한 화면을 여러개의 컴포넌트로 나누어서 구현가능

2. Components 추출
- 복잡한 컴포넌트를 쪼개서 여러 개의 컴포넌트를 나눌 수 있음
- 큰 컴포넌트에서 일부를 추출해서 새로운 컴포넌트를 만든다는 뜻
- 추출을 잘 활용하면 컴포넌트의 재사용성이 올라가게 됨, 재사용상이 올라가면 개발 속도도 빨라짐