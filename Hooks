### 1. hook
함수 컴포넌트에서도 클래스 컨포넌트와 같이 작동되도록 하기 위하여 만들어진 것

1. useState()
스테이트를 사용하기 위한 훅
변수 각각에 set함수가 따로 존재한다.

const [변수명, set햠수명] = useState(초기값);

### 2. ustEffect
sideEffect를 사용하기 위한 훅

3. side effect
다른 컴포넌트에 영향을 미칠 수 있으며, 렌더링 중에는 작업이 완료될 수 없기 때문 이러한 이유로 side Effect라고 불리고 이러한 훅을 use Effect가 사용할 수 있게 해줌

useEffect(이펙트 함수, []) 

[]안에는 의존성 배열을 생략할 수 있다, 만일 생략한다면 컴포넌트는 업데이트 될 때 마다 사용된다.

### 4. useMemo()
Menoized value를 리턴하는 훅

5. Memoizeation
함수 결과를 저장해 두었다가 같은 입력 값으로 호출하면 새로운 함수를 호출하지 않고 이전에 저장해 놨던 호출 결과를 바로 반환하는 것

1. 빠른 렌더링 속도
2. 렌더링이 일어날 때만 실행이 됨
3. 의존성 배열을 넣어야 됨
4. 긴 배열을 넣으면 컴포넌트 마운트 시에만 호출 됨

### 6. useCallback()
함수와 의존성 배열을 파라미터로 받음, 그 점은 useMemo 훅과 같음 그러나 특정 변수의 값이 변한 경우에만 함수를 다시 정의하게 됨

### 7. useRef()
Reference를 사용하기 위한 훅

8. Reference
1. 특정 컴포넌트에 접근할 수 있는 객체
2. ref 속성과 기능은 비슷하지만 useRefHook은 클래스의 instance 필드를 사용하는 것과 유사하게 다양한 변수를 저장할 수 있다는 장점이 있음
3. useRef() Hook은 내부의 데이터가 변경되었을 때 별도로 알리지 않는다.

refObject.current <!-- current는 현재 참조하고 있는 Element -->

const refContainer = useRef(초기값)

<div ref={myRef} />

### 8. Callback ref
다른 노드에 연결될 때마다 callback을 호출함

### 9. 규칙
1. Hook은 무조건 **최상위 레벨**에서만 호출해야함
2. Hook은 컴포넌트가 렌더링될 때마다 매번 같은 순서로 호출이 되어야 한다. 
3. **리액트 함수 컴포넌트**에서만 Hook울 호츌해야 한다. 
4. 의존성 배열 잘 만들기

### 10. Custom Hook
이름이 use로 시작하고 내부에서 다른 Hook을 호출하는 하나의 자바스크립트 함수
1. 꼭 use로 시작해야됨
2. 호출 또한 완전히 독립적